{
  
    
        "post0": {
            "title": "Corga19_20",
            "content": ". . Relatório do diagnóstico da Cultura Organizacional da Devscope . Subtítulo - xxxxxxx . Turma 3DX_ Grupo 04 . 1170541 _ Alexandra Leite . 1170700 _ Gonçalo Teixeira . 1170610 _ Hugo Sousa . 1171397_ Rúben Rodrigo . | Docente/Orientador . Sónia Sousa, SSN . Unidade Curricular . CORGA . | . Data: 3/2020 . ** . **Resumo . Este relatório têm o objetivo de apresentar e analisar os resultados do nosso diagnóstico da cultural organizacional da empresa DevScope. . Para realizar esta análise utilizaremos o modelo de Cameron &amp; Quinn, também conhecido como o modelo OCAI. . Através desta análise, determinamos que a organização apresenta uma cultura desejada muito próxima da cultura atual, sendo que isso, mostra um grau significativo de satisfação dos colaboradores para com a empresa. Além disso, concluímos que a empresa tem como cultura dominante uma cultura de Colaboração e Criação, indicando assim uma empresa cujo foco é nas suas equipas e na participação dos seus elementos, assim como iniciativa individual e liberdade. . Portanto, podemos concluir que a organização esta a estimular uma cultura que vai ao encontro das expetativas dos seus colaboradores. . # . # . Palavras-chave . # Índice . Resumo II . Palavras-chave II . Índice III . Índice de quadros, figuras, abreviaturas III . 1. Introdução 1 . 2. xxxxxxxx 2 . 2.1 Revisão da literatura 2 . 2.2 Metodologia 3 . 2.3 Apresentação da Organização 4 . 2.4 Apresentação dos Resultados 5 . 2.5 Discussão dos Resultados 6 . 2.6 Conclusões 7 . Referências 8 . Anexos 9 . # . Índice de quadros, figuras, abreviaturas . # . # . Introdução . Este projeto foi desenvolvido para a cadeira de CORGA, com objetivo de conhecermos o impacto da cultura organizacional vivida nas organizações. Este é tema importante, porque a analise introspetiva de uma organização traz sempre valor, o que quero dizer com isto é, ao analisarmos como a vida dentro da organização corre, podemos tirar conclusões boas ou más sobre se os objetivos como dinâmica vivida estão a ser alcançados ou se vai de encontro com as expectativas dos colaboradores. . Assim para este projeto escolhemos a DevScope como organização para analisar a sua cultura organizacional, com objetivo de saber se a realidade vivida dentro da organização vai de encontro às espectativas dos colaboradores e se existem pontos em que a organização possa melhorar. . Este relatório começa por expor o tema da cultura organizacional ao leitor, mostrando a sua importância e impacto, e explicar o uso de uma ferramenta chamada OCAI, que ajuda a fazer a analise da cultura. Depois passa a explicação de como foi feita a recolha dos dados e como foram analisados com o recurso ao OCAI. De seguida damos a conhecer o trabalho da DevScope e falamos sobre a sua missão, visão e valores. A seguir apresentamos os resultados objetivos com suporte a vários gráficos e tiramos conclusões sobre os mesmos. Por fim damos uns últimos pareceres de se a empresa está a ter sucesso com a comunicação interna entre a transmissão dos objetivos da empresa e os trabalhadores e se estão todos satisfeitos com o rumo da empresa. . # . # xxxxxxxx . Revisão da literatura . | | Cultura Organizacional . Vamos começar então a revisão de literatura com a definição de cultura organizacional . “A cultura organizacional é a essência da empresa, expressada pela maneira como ela faz seus negócios, trata seus clientes e funcionários. É o conjunto de hábitos e crenças estabelecidos através de valores, normas e atitudes compartilhadas pelos membros da organização, ou seja, são os princípios que exprimem a identidade da organização.” (Closs, D., 2019) . A cultura organizacional não é nada mais nada menos do que um conjunto de características que define a dinâmica vivida dentro da organização. . A cultura vivida pode trazer muitos benefícios desde os benefícios pessoais aos financeiros. O que quero com isto dizer, o preferiria um trabalhador? Ir para o trabalho porque que quer ou sentir que é um peso ir trabalhar? A cultura tem de ser criada aos poucos e orientada para o mercado em que se insere se ela for divulgada para o exterior aquando novos trabalhadores se quiserem juntar eles já sabem para o que vão, atraindo apenas interessados, eles poderão ter a possibilidade de escolha sentindo-se mais confiantes e com liberdade de escolha. O que eu estou a tentar dizer que se uma pessoa esta feliz e enquadrada no local onde trabalha então ela vai ser bem mais produtiva e sentir-se à bem mais motivada o que resulta em benefícios financeiros para a empresa que teoricamente os custos de desenvolvimento de produto ou serviço baixam, o atendimento ao cliente consegue ser de tal maneira melhor que torna o cliente pode tornar-se leal e ate convencer outros amigos a iram à procura daquela organização, a motivação dos trabalhadores pode ser contagiosa para outros colaboradores, se conseguirmos relacionarmos com os nossos colegas contão também resulta numa melhor compreensão entre todos , ou seja a comunicação interna passa a ser uma ferramenta de poder, que leva tudo no final às pessoas estarem todas alinhadas com os objetivos da organização num ambiente em que todos ganham. . Como disse antes a cultura tem de ser construída, o que não impede que ela, durante essa altura, comece a desviar-se para dos objetivos propostos como cultura. Para isso é preciso analisar de alguma forma a dinâmica vivida dentro da organização, para isso existem vários modelos de analise de cultura organizacional como por exemplo o OCAI feito por Kim Cameron e Robert Quinn e outro chamado “Ogbonna &amp; Harris” que foi feito por Emmanuel Ogbonna e Lloyd C. Harris. . Para esta projeto foi escolhido o OCAI por ser mais recente podendo estar mais relacionado com cultura atual. Dessa forma vamos agora passar à descrição do modelo OCAI. . OCAI . O OCAI (Organizational Culture Assessment Instrument) é uma ferramenta conceituada para avaliar a cultura organizacional de uma empresa. No OCAI o utilizador distribui 100 pontos entre quatro “Valores” que competem entre si. Desses 4 Valores cada um deles vai ajudar a definir um estilo de cultura organizacional e cada empresa tem a sua combinação entre eles. Os critérios que foram encontrados para fazer a diferença dos estilos são a dimensão Interna-Externa e a dimensão de estabilidade-flexibilidade. . A dimensão interna de uma empresa foca-se no desenvolvimento, na colaboração, na integração de atividades e na coordenação. Já a dimensão externa tem mais a ver com o posicionamento de mercado da empresa, mais especificamente as tecnologias que usa, com o que os concorrentes fazem, com o que os clientes querem e com o que faz com que as atividades, dentro da organização, sejam mais diversificadas. . Nisto não existe um lado para ser melhor, tem de existir um equilíbrio nesta dimensão para que haja sucesso. . A dimensão de estabilidade foca se no trabalho das organizações para valorizarem estruturas, o planeamento, orçamentos e confiança, ou seja, assumem que a realidade é conhecida e controlada. As organizações que se organizam com flexibilidade assumem o oposto, ou seja, nunca dá para prever nem controlar tudo, concentrando-se mais em pessoas e atividades do que em estruturas, procedimentos e planos. . A própria natureza desta dimensão não permite que os dois lados funcionem ao mesmo tempo. . Ao cruzar estes Valores, o resultado vai nos dizer qual o tipo de cultura, mais predominante, que existe e a partir dá tirar conclusões de se a cultura na organização é a melhor para o ramo de trabalho. Mas para tirarmos conclusões mais acertadas foi feito o gráfico abaixo. . Figura 1 - Modelo OCAI . Essas culturas podem ser: . Dinâmicas, Cultura de Criação empreendedora (Adhocracy) . | Orientado a Pessoas, Cultura de Colaboração amigável (Clan) . | Orientado ao Processo, Cultura de Controlo estruturada (Hierarchy) . | Orientada a Resultados, Cultura de Competição (Market) . | . Cultura de Criação . Esta cultura tem um ambiente dinâmico e criativo onde os funcionários podem assumir riscos, os líderes são vistos como o pilar inovador e as pessoas assumem riscos. Tudo com o objetivo a longo prazo de crescer e criar recursos novos. Também valoriza a disponibilidade de novos produtos ou serviços. Este tipo de cultura promove a iniciativa individual e a liberdade. . Cultura de Colaboração . Esta Cultura tem um ambiente de trabalho amigável. As pessoas valorizam o ambiente familiar e os interesses em comum, onde os líderes são vistos como mentores e a organização é mantida unida e leal à tradição. Aqui existe grande envolvimento por todas as partes da empresa e também enfatizam o desenvolvimento dos recursos humanos a longo prazo. O sucesso desta cultura está na eficácia com que atendem os seus clientes e cuidam das pessoas. A organização também promove o trabalho em equipa, a participação e o consenso. . Cultura de Controlo . Esta cultura tem um ambiente de trabalho formal e estruturado. Aqui existem procedimentos que dizem o que as pessoas devem fazer, os líderes têm orgulho na coordenação e na organização com o objetivo de ter eficácia. Neste tipo é crucial que a organização não tenha problemas, daí existirem maior um número de regras e políticas que fazem com que a organização se mantenha unida e estável. Os objetivos desta cultura são de estabilidade e resultados a longo prazo alcançados com a eficiência. A confiança que a organização traz, o planeamento continuo e os baixos custos definem o seu sucesso. . Cultura de Competição . Esta cultura de trabalho tem um ambiente baseado em resultados que dá destaque às metas, prazos e à realização de tarefas. Aqui as pessoas são competitivas e focadas em atingir objetivos, os líderes são vistos como motivadores, os produtores e os rivais. O destaque para a vitoria mantém a organização unida. Os objetivos desta cultura centram-se em atingir objetivos e estar a par das atividades rivais. Eles alcançam estes objetivos com o domínio de mercado, métricas e alcance de objetivos. . Dito isto tudo, com esta breve apresentação, podemos perceber que este modelo não serve para dizer se estamos a fazer as coisas bem ou mal, serve para termos uma perspetiva em relação ao ambiente vivido na empresa, dessa forma uma pessoa pode comparar com organizações rivais e ver se o seu ambiente é o mais eficaz para o trabalho que desenvolve ou se é pior ou se não tem impacto mesmo sendo diferente de outras empresas. . https://www.ocai-online.com/about-the-Organizational-Culture-Assessment-Instrument-OCAI . https://endomarketing.tv/cultura-organizacional/#.XnY5KWEYCUk - quote . ** . **Metodologia . O objetivo da realização deste questionário foi a identificação dos tipos de cultura predominantes na organização por nós escolhida, a DevScope, e a sua posterior comparação com aquela que seria a desejada pelos empregados da já mencionada empresa. É também pretendido o estudo da força da cultura predominante assim como a força de eventuais culturas desejadas que não se encontrem atualmente. Este estudo foi feito na Organização previamente mencionada sendo esta empresa o público alvo. . O estudo a ser realizado foca-se na cultura organizacional da empresa por nós escolhida, sendo a amostra recolhida diversa. O questionário foi divulgado a todos os funcionários, tanto quadros superiores como estagiários, de todos os departamentos existentes na organização. . Foi realizada uma pesquisa por levantamento e diversos membros e posteriormente feita uma análise quantitativa dos dados. A pesquisa por levantamento foi utilizada uma vez que a realização do modelo OCAI se adequa a um questionário, e o tratamento dos dados de uma forma quantitativa deveu-se maioritariamente com a forma como o modelo se centra na atribuição de valores numéricos às perguntas desejadas, para que eles possam ser calculados valores numéricos para os tipos de cultura que este modelo analisa. . Para que os colaboradores pudessem preencher este inquérito anonimamente foi criado um website onde era possível os colaboradores preencherem o questionário e submeter as respostas que desejassem. Desta forma assegurámos que o preenchimento do questionário era correto e que este era anónimo. . Esta maneira de preencher o inquérito levou no entanto a uma pequena imprecisão nos dados, como os valores que o utilizador introduz eram normalizados após a sua inserção (se o utilizador atribuísse a um grupo de perguntas um valor diferente de 100 estes valores eram convertidos em valores correspondentes, dentro do valor desejado e mantendo a relação entre o peso das perguntas) é possível que o utilizador insira valores que por causa desta relação de equidade não sejam exatamente os que ele desejou. . ** . **Apresentação da Organização . O nosso trabalho irá realizar a análise OCAI à empresa DevScope, uma organização do Porto localizada na Rua Passos Manuel, 223 - 4º Andar. . A DevScope é uma empresa de informática fortemente interligada com a Microsoft e o seu ecossistema, sendo um “Microsoft’s Gold Certified Partner”. . Empresa especializada em Business Intelligence, Collaboration (Sharepoint), CRM, Office/Excel add-ons, Systems Integration e Mobile Development . Têm como missão a entrega de soluções de IT (Informatics) e de IS (Information system) com inovação e desempenho que vai ao encontro por completo das necessidades dos seus clientes. . A visão assenta em construir soluções que resolvam as necessidades imediatas dos clientes da empresa melhor que as restantes e prepará-los para o futuro usando os conhecimentos e a experiência coletiva que a DevScope pode oferecer. . A DevScope tem vários valores que guiam a organização, primeiro colocar os clientes no centro de tudo e fazer tudo para que as necessidades do cliente sejam cumpridas. . Segundo, os consultores oferecem valor a cada um dos requisitos, prazo e orçamento dos clientes usando a experiência, inovação e talento dos seus empregados. A empresa consegue isto combinando a paixão pela entrega de resultados com a paixão por tecnologia. . Por fim, a equipa de desenvolvimento da empresa usa ao máximo as inovações e melhores práticas dos projetos mais prósperos da empresa, e construir sobre estes projetos para criar um portefólio da maior qualidade de soluções sólidas e repetíveis, através destas soluções sólidas a DevScope pode oferecer aos seus clientes soluções mais baratas e com maior velocidade de desenvolvimento. . Apresentação dos Resultados . Esteve a circular por alguns colaboradores da DevScope um questionário OCAI e os seus resultados foram processados de forma a obtermos os seguintes gráficos. Usando a média das respostas, foi preenchido o questionário OCAI obtendo os gráficos 1, 2 e 3. Os gráficos 4 e 5 foram criados com o objetivo de conhecer a variação entre as respostas dos colaboradores e, por último, o gráfico 6 permite uma melhor observação dos valores médios obtidos em cada categoria. . Gráfico 1 - Radar Chart Cultura Atual . Gráfico 2 - Radar Chart Cultura Desejada . Gráfico 3 - Radar Chart Cultura Atual e Desejada . Gráfico 4 - Boxplot Cultura Atual . Gráfico 5 - Boxplot Cultura Desejada . Gráfico 6 - Diagrama de Barras Cultura Atual e Desejada . ** . **Discussão dos Resultados . Os resultados obtidos, relativos à média dos valores, permitem-nos verificar que a empresa estudada tem uma cultura predominantemente de criação e colaboração, seguidas de algumas características de um ambiente baseado em resultados e um ambiente mais rigoroso. . Tal definição não é comum entre todos os colabores que, como podemos observar pelo gráfico 4, apresenta ainda grandes disparidades quanto ao peso dado, essencialmente, à cultura de controlo e colaborativa. . Ao compararmos o corrente com o desejado, vemos que, na média dos valores, os objetivos dos colaboradores foram atingidos pela DevScope, sem nenhuma diferença que seja notável ou significativa para ser referenciada. . Numa perspetiva mais profunda, considerando os valores do gráfico 5, é notável a diferença de objetivos entre os colaboradores, convergindo estes na maior necessidade de um ambiente de trabalho apelativo, em que a cooperação e a entreajuda prevalecem. Também se pode concluir que, ao contrário do que sentem atualmente os trabalhadores, procura-se menos foco em atingir objetivos do que cumprir regras e políticas que provocam alguma pressão sobre os trabalhadores, se este ponto fosse aliviado melhoraria a organização e coordenação da empresa. . Num outro ponto de vista, a orientação da empresa foca-se principalmente numa perspetiva interna, ou seja, dá mais importância ao que os colaboradores necessitam, de modo a aumentar a sua motivação e, consequentemente, a sua produtividade. A DevScope cede, então, uma menor atenção ao que os seus concorrentes produzem, sendo mais complexo tentar alcançar um melhor posicionamento no mercado. . Em termos organizacionais, a empresa assume que a sua realidade não é constante nem previsível. É mais relevante focar-se nas pessoas e nas suas atividades, tornando-as mais flexíveis, do que tentar estabilizar definindo estruturas e planos que provavelmente não se conseguiriam pôr em prática. . Como demonstrado no gráfico 6, tais princípios da DevScope relativos à sua orientação e organização, vão de encontro com o que os seus colaboradores pretendem. . Conclusões . Este relatório teve como objetivo principal a identificação e analise da cultura organizacional da empresa DevScope, para isto utilizamos o modelo OCAI, depois da aplicação deste modelo fomos capazes de determinar que na empresa domina uma cultura de criação e colaboração, assim como o facto que a cultura dominante é aquela desejada pelos colaboradores. . Através desta análise da organização podemos determinar que a empresa está a estimular, com sucesso, uma cultura que vai de encontro aos desejos dos seus colaboradores, com este conhecimento a empresa pode tentar ir ainda mais ao encontro dos desejos dos seus colaboradores. . Apesar disto esta análise teve uma serie de fatores que trazem instabilidade aos nossos resultados, especialmente o facto de termos apenas recolhido 24 respostas ao questionário assim como o sacrifício que fizemos á precisão dos dados no momento de recolha para providenciarmos ao utilizador um questionário mais acessível. Dado estas limitações no futuro poderíamos criar um questionário com maior precisão e tentar obter maior adesão pelos colaboradores da empresa. . Portanto, fomos capazes de realizar a análise da cultura organizacional da empresa DevScope, usando o modelo OCAI. . # Referências . Closs, D. (2019, June 17). Cultura Organizacional: Tudo o que Você Precisa Saber. Retrieved March 21, 2020, from https://endomarketing.tv/cultura-organizacional/#caracteristicas . About the Organizational Culture Assessment Instrument (OCAI). (n.d.). Retrieved March 10, 2020, from https://www.ocai-online.com/about-the-Organizational-Culture-Assessment-Instrument-OCAI . # .",
            "url": "https://goncalogteixeira.github.io/fastPagesGoncalo/2020/03/24/CORGA19_20.html",
            "relUrl": "/2020/03/24/CORGA19_20.html",
            "date": " • Mar 24, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "An introduction to R . R is a highly extensible language and environment for statistical computing and graphics. It&#39;s distributed for free under the GNU General Public License, enjoys strong community support, and is known for its ability to produce publication-quality plots including mathematical symbols and formulae. You can learn more about R at r-project.org and An Introduction to R. . Typically, using R typically means taking the time to set up an R environment. Azure Notebooks removes this detailed process, giving you a pre-configured environment that&#39;s ready for your R code. . This notebook demonstrates R within a Jupyter notebook, using material from Section 2 - Simple manipulations; numbers and vectors and Appendix A - A Sample Session from the aforementioned An Introduction to R documentation. It also includes content built around the well-known demo(graphics) command of R, with comments converted into Markdown cells. . Note that the R kernel is still in development, so some language features may not be available. To submit issues and requests for features, refer to the Azure Notebooks GitHub repository. . Simple manipulations; numbers and vectors . Vectors and assignment . R operates on named data structures. The simplest such structure is the numeric vector, which is a single entity consisting of an ordered collection of numbers. To set up a vector named x, say, consisting of five numbers, namely 10.4, 5.6, 3.1, 6.4 and 21.7, use the following R command: . x &lt;- c(10.4, 5.6, 3.1, 6.4, 21.7) . In a notebook, the previous cell won&#39;t show any output. You can see the contents of x by simple running x in a code cell: . x . &lt;ol class=list-inline&gt; 10.4 | 5.6 | 3.1 | 6.4 | 21.7 | &lt;/ol&gt; x &lt;- is an assignment statement using the function c(), which in this context can take an arbitrary number of vector arguments and whose value is a vector got by concatenating its arguments end to end. . A number occurring by itself in an expression is taken as a vector of length one. . The assignment operator (&lt;-) consists of the two characters, &lt; (&quot;less than&quot;) and &#39;-&#39; (&quot;minus&quot;) occurring strictly side-by-side. The operator points to the object receiving the value of the expression. In most contexts the &#39;=&#39; operator can be used as an alternative. . Assignment can also be made using the assign() function (including here also the line x to show the value as output). The &lt;- operator can be thought of as a shortcut to assign(). . assign(&quot;x&quot;, c(10.4, 5.6, 3.1, 6.4, 21.7)) x . &lt;ol class=list-inline&gt; 10.4 | 5.6 | 3.1 | 6.4 | 21.7 | &lt;/ol&gt; Assignments can also be made from left to right by changing the direction of the assignment operator: . c(10.4, 5.6, 3.1, 6.4, 21.7) -&gt; x x . &lt;ol class=list-inline&gt; 10.4 | 5.6 | 3.1 | 6.4 | 21.7 | &lt;/ol&gt; If an expression is used as a complete command, the value is printed and lost. For example, the following statement displays the reciprocals of the values in x, but doesn&#39;t assign those values to any variable: . 1/x . &lt;ol class=list-inline&gt; 0.0961538461538461 | 0.178571428571429 | 0.32258064516129 | 0.15625 | 0.0460829493087558 | &lt;/ol&gt; Finally, the following code creates a vector y with 11 entries consisting of two copies of x with a zero in the middle place. . y &lt;- c(x, 0, x) y . &lt;ol class=list-inline&gt; 10.4 | 5.6 | 3.1 | 6.4 | 21.7 | 0 | 10.4 | 5.6 | 3.1 | 6.4 | 21.7 | &lt;/ol&gt; Vector arithmetic . Vectors can be used in arithmetic expressions, in which case the operations are performed element by element. Vectors occurring in the same expression need not all be of the same length. If they are not, the value of the expression is a vector with the same length as the longest vector which occurs in the expression. Shorter vectors in the expression are recycled as often as need be (perhaps fractionally) until they match the length of the longest vector. In particular, a constant is simply repeated. . The following expression, using the x and y values from the previous section (which, if you ran those code cells, are in the notebook session), generates a new vector v of length 11 constructed by adding together, element by element, 2*x repeated 2.2 times, y repeated just once, and 1 repeated 11 times. Note that the code issues a warning because the length of y is not an integral multiple of 2*x. . v &lt;- 2*x + y + 1 v . Warning message in 2 * x + y: “longer object length is not a multiple of shorter object length” . &lt;ol class=list-inline&gt; 32.2 | 17.8 | 10.3 | 20.2 | 66.1 | 21.8 | 22.6 | 12.8 | 16.9 | 50.8 | 43.5 | &lt;/ol&gt; The elementary arithmetic operators are the usual +, -, *, /, and ^ (raise to a power), along with all the common arithmetic functions: log, exp, sin, cos, tan, sqrt, and so on. max and min select the largest and smallest elements of a vector, respectively. range(v) returns a vector of length two, namely c(min(x), max(x)). length(x) is the number of elements in x, sum(x) gives the total of the elements in x, and prod(x) their product. . log(v) sin(v) sqrt(v) min(v) max(v) range(v) length(v) sum(v) prod(v) . &lt;ol class=list-inline&gt; 3.47196645255036 | 2.87919845729804 | 2.33214389523559 | 3.00568260440716 | 4.19116874685764 | 3.08190996979504 | 3.11794990627824 | 2.54944517092557 | 2.82731362192903 | 3.92789635458444 | 3.77276093809464 | &lt;/ol&gt; &lt;ol class=list-inline&gt; 0.706169457180334 | -0.867202179485583 | -0.767685809763582 | 0.975820517766976 | -0.12621672981821 | 0.189986675795438 | -0.571925655109564 | 0.231509825101539 | -0.929124012734368 | 0.509425937110429 | -0.463815515983827 | &lt;/ol&gt; &lt;ol class=list-inline&gt; 5.67450438364444 | 4.2190046219458 | 3.20936130717624 | 4.49444101084885 | 8.13019064967114 | 4.6690470119715 | 4.75394572960189 | 3.57770876399966 | 4.11096095821889 | 7.12741187248218 | 6.59545297913646 | &lt;/ol&gt; 10.3 66.1 &lt;ol class=list-inline&gt; 10.3 | 66.1 | &lt;/ol&gt; 11 315 1856438232320848 Two statistical functions are mean(x), which calculates the sample mean and is the same as sum(x)/length(x), and var(x) which gives the sample variance: . sum((x-mean(x))^2)/(length(x)-1) var(x) . 53.853 53.853 If the argument to var() is an n-by-p matrix the value is a p-by-p sample covariance matrix got by regarding the rows as independent p-variate sample vectors. . sort(x) returns a vector of the same size as x with the elements arranged in increasing order; however there are other more flexible sorting facilities available (see order() or sort.list() which produce a permutation to do the sorting). . Note that max and min select the largest and smallest values in their arguments, even if they are given several vectors. The parallel max/min functions pmax and pmin return a vector (of length equal to their longest argument) that contains in each element the largest (smallest) element in that position in any of the input vectors. . For most purposes, you&#39;re not concerned if the &quot;numbers&quot; in a numeric vector are integers, reals or even complex. Internally calculations are done as double precision real numbers, or double precision complex numbers if the input data are complex. . To work with complex numbers, supply an explicit complex part, otherwise, as the code below demonstrates, you&#39;ll see a Nan (not-a-number) warning: . sqrt(-17) . Warning message in sqrt(-17): “NaNs produced” . NaN But the following expression performs the computation as complex numbers: . sqrt(-17+0i) . 0+4.12310562561766i Generating regular sequences . R has a number of facilities for generating commonly used sequences of numbers. For example, the colon is a shorthand for creating a vector of sequential numbers in ascending or descending order: . 1:30 30:1 . &lt;ol class=list-inline&gt; 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | &lt;/ol&gt; &lt;ol class=list-inline&gt; 30 | 29 | 28 | 27 | 26 | 25 | 24 | 23 | 22 | 21 | 20 | 19 | 18 | 17 | 16 | 15 | 14 | 13 | 12 | 11 | 10 | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1 | &lt;/ol&gt; 1:30 is equivalent to writing c(1, 2, 3, ..., 30), and a lot less tedious! . Within expressions, the colon has a higher precedence than other operators except parenthases: . 2*1:15 n &lt;- 10 1:n-1 1:(n-1) . &lt;ol class=list-inline&gt; 2 | 4 | 6 | 8 | 10 | 12 | 14 | 16 | 18 | 20 | 22 | 24 | 26 | 28 | 30 | &lt;/ol&gt; &lt;ol class=list-inline&gt; 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | &lt;/ol&gt; &lt;ol class=list-inline&gt; 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | &lt;/ol&gt; The seq() function is a more general means for generating sequences. It has five arguments, only some of which may be specified in any one call. The first two arguments, if given, specify the beginning and end of the sequence, and if these are the only two arguments given the result is the same as the colon operator. For example, seq(2,10) is the same vector as 2:10. . seq(2,10) 2:10 . &lt;ol class=list-inline&gt; 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | &lt;/ol&gt; &lt;ol class=list-inline&gt; 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | &lt;/ol&gt; Arguments to seq(), and to many other R functions, can also be given in named form, in which case the order in which they appear is irrelevant. With seq(), the first two arguments may be named from=value and to=value; thus the following expressions are all identical: . seq(1,30) seq(from=1, to=30) seq(to=30, from=1) 1:30 . &lt;ol class=list-inline&gt; 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | &lt;/ol&gt; &lt;ol class=list-inline&gt; 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | &lt;/ol&gt; &lt;ol class=list-inline&gt; 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | &lt;/ol&gt; &lt;ol class=list-inline&gt; 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | &lt;/ol&gt; The next two arguments to seq() may be named by=value and length=value, which specify a step size and a length for the sequence respectively. If neither of these is given, the default by=1 is assumed. For example: . seq(-5, 5, by=.2) -&gt; s3 # Assigns the vector c(-5.0, -4.8, -4.6, …, 4.6, 4.8, 5.0) to s3 s3 s4 &lt;- seq(length=51, from=-5, by=.2) # Assigns the same vector to s4 s4 . &lt;ol class=list-inline&gt; -5 | -4.8 | -4.6 | -4.4 | -4.2 | -4 | -3.8 | -3.6 | -3.4 | -3.2 | -3 | -2.8 | -2.6 | -2.4 | -2.2 | -2 | -1.8 | -1.6 | -1.4 | -1.2 | -1 | -0.8 | -0.6 | -0.399999999999999 | -0.199999999999999 | 0 | 0.2 | 0.4 | 0.600000000000001 | 0.800000000000001 | 1 | 1.2 | 1.4 | 1.6 | 1.8 | 2 | 2.2 | 2.4 | 2.6 | 2.8 | 3 | 3.2 | 3.4 | 3.6 | 3.8 | 4 | 4.2 | 4.4 | 4.6 | 4.8 | 5 | &lt;/ol&gt; &lt;ol class=list-inline&gt; -5 | -4.8 | -4.6 | -4.4 | -4.2 | -4 | -3.8 | -3.6 | -3.4 | -3.2 | -3 | -2.8 | -2.6 | -2.4 | -2.2 | -2 | -1.8 | -1.6 | -1.4 | -1.2 | -1 | -0.8 | -0.6 | -0.399999999999999 | -0.199999999999999 | 0 | 0.2 | 0.4 | 0.600000000000001 | 0.800000000000001 | 1 | 1.2 | 1.4 | 1.6 | 1.8 | 2 | 2.2 | 2.4 | 2.6 | 2.8 | 3 | 3.2 | 3.4 | 3.6 | 3.8 | 4 | 4.2 | 4.4 | 4.6 | 4.8 | 5 | &lt;/ol&gt; The fifth argument may be named along=vector, which is normally used as the only argument to create the sequence 1, 2, ..., length(vector), or the empty sequence if the vector is empty (as it can be). . A related function is rep() which can be used for replicating an object in various complicated ways. The simplest form is the following, which puts five copies of x end-to-end in s5. . s5 &lt;- rep(x, times=5) s5 . &lt;ol class=list-inline&gt; 10.4 | 5.6 | 3.1 | 6.4 | 21.7 | 10.4 | 5.6 | 3.1 | 6.4 | 21.7 | 10.4 | 5.6 | 3.1 | 6.4 | 21.7 | 10.4 | 5.6 | 3.1 | 6.4 | 21.7 | 10.4 | 5.6 | 3.1 | 6.4 | 21.7 | &lt;/ol&gt; Another useful version is the following expression, which repeats each element of x five times before moving on to the next. . s6 &lt;- rep(x, each=5) s6 . &lt;ol class=list-inline&gt; 10.4 | 10.4 | 10.4 | 10.4 | 10.4 | 5.6 | 5.6 | 5.6 | 5.6 | 5.6 | 3.1 | 3.1 | 3.1 | 3.1 | 3.1 | 6.4 | 6.4 | 6.4 | 6.4 | 6.4 | 21.7 | 21.7 | 21.7 | 21.7 | 21.7 | &lt;/ol&gt; Logical vectors . Along with numerical vectors, R allows manipulation of logical quantities. The elements of a logical vector can have the values TRUE, FALSE, and NA (for &quot;not available&quot;). The first two are often abbreviated as T and F, respectively. However, T and F are just variables that are set to TRUE and FALSE by default; they aren&#39;t reserved words and thus can be overwritten by your own code if you use the same names (and the same case; variables in R are case-sensitive). Consequently, always use TRUE and FALSE for clarity: . T F t &lt;- 5 t T T &lt;- 10 T TRUE . TRUE FALSE 5 TRUE 10 TRUE Logical vectors are generated by conditions. The following expression, for example, sets temp as a vector of the same length as x with values FALSE corresponding to elements of x where the condition is not met and TRUE where it is: . temp &lt;- x &gt; 13 temp . &lt;ol class=list-inline&gt; FALSE | FALSE | FALSE | FALSE | TRUE | &lt;/ol&gt; The logical operators are &lt;, &lt;=, &gt;, &gt;=, == for exact equality, and != for inequality. In addition if c1 and c2 are logical expressions, then c1 &amp; c2 is their intersection (&quot;and&quot;), c1 | c2 is their union (&quot;or&quot;), and !c1 is the inverse of c1. . Logical vectors may be used in ordinary arithmetic, in which case they are coerced into numeric vectors, FALSE becoming 0 and TRUE becoming 1. However there are situations where logical vectors and their coerced numeric counterparts are not equivalent, as explained in the next section. . Missing values . In some cases, the components of a vector may not be completely known. When an element or value is &quot;not available&quot; or a &quot;missing value&quot; in the statistical sense, you can reserve a place for it within a vector by assigning it the special value NA. In general, any operation on an NA becomes an NA. The motivation for this rule is simply that if the specification of an operation is incomplete, the result cannot be known and hence is not available. . The function is.na(x) gives a logical vector of the same size as x with value TRUE if and only if the corresponding element in x is NA: . z &lt;- c(1:3,NA); ind &lt;- is.na(z) z . &lt;ol class=list-inline&gt; 1 | 2 | 3 | &lt;NA&gt; | &lt;/ol&gt; Notice that the logical expression x == NA is quite different from is.na(x) because NA is not really a value but a marker for a quantity that is not available. Thus x == NA is a vector of the same length as x, all of whose values are NA as the logical expression itself is incomplete and hence undecidable. . There is also is a second kind of &quot;missing&quot; value, the NaN or not-a-number, which is produced by numerical computation that cannot be sensibly performed: . 0/0 Inf - Inf . NaN NaN In summary, is.na(x) is TRUE for both NA and NaN values. To differentiate these, is.nan(x) is only TRUE for NaNs. Missing values are sometimes printed as &lt;NA&gt; when character vectors are printed without quotes. . Character vectors . Character quantities and character vectors are used frequently in R, for example as plot labels. They&#39;re defined by a sequence of characters inside double quotes, for example: . &quot;x-values&quot; &quot;New iteration results&quot; . &#39;x-values&#39; &#39;New iteration results&#39; Character strings are entered using either matching double (&quot;) or single (&#39;) quotes, but are printed using double quotes (or sometimes without quotes). They use C-style escape sequences, using as the escape character, so is entered and printed as , and inside double quotes. &quot; is entered as &quot;. Other useful escape sequences are n (newline), t (tab), and b (backspace). —see ?Quotes for a full list. . Character vectors may be concatenated into a vector using the c() function. . The paste() function takes an arbitrary number of arguments and concatenates them one by one into character strings. Any numbers given among the arguments are coerced into character strings in the evident way, that is, in the same way they would be if they were printed. The arguments are by default separated in the result by a single blank character, but this can be changed by the named argument, sep=string, which changes it to string, possibly empty. . For example, the following expression makes labs into the same character vector as the second expression: . labs &lt;- paste(c(&quot;X&quot;,&quot;Y&quot;), 1:10, sep=&quot;&quot;) labs c(&quot;X1&quot;, &quot;Y2&quot;, &quot;X3&quot;, &quot;Y4&quot;, &quot;X5&quot;, &quot;Y6&quot;, &quot;X7&quot;, &quot;Y8&quot;, &quot;X9&quot;, &quot;Y10&quot;) . &lt;ol class=list-inline&gt; &#39;X1&#39; | &#39;Y2&#39; | &#39;X3&#39; | &#39;Y4&#39; | &#39;X5&#39; | &#39;Y6&#39; | &#39;X7&#39; | &#39;Y8&#39; | &#39;X9&#39; | &#39;Y10&#39; | &lt;/ol&gt; &lt;ol class=list-inline&gt; &#39;X1&#39; | &#39;Y2&#39; | &#39;X3&#39; | &#39;Y4&#39; | &#39;X5&#39; | &#39;Y6&#39; | &#39;X7&#39; | &#39;Y8&#39; | &#39;X9&#39; | &#39;Y10&#39; | &lt;/ol&gt; Note particularly that recycling of short lists takes place here; thus c(&quot;X&quot;, &quot;Y&quot;) is repeated five times to match the sequence 1:10. . Index vectors; selecting and modifying subsets of a data set . Subsets of the elements of a vector may be selected by appending to the name of the vector an index vector in square brackets. More generally any expression that evaluates to a vector may have subsets of its elements similarly selected by appending an index vector in square brackets immediately after the expression. . Such index vectors can be any of four distinct types. . (1) A logical vector . In this case the index vector is recycled to the same length as the vector from which elements are to be selected. Values corresponding to TRUE in the index vector are selected and those corresponding to FALSE are omitted. For example, the following expression creates (or re-creates) an object y which contains the non-missing values of x, in the same order. Note that if x has missing values, y is be shorter than x. . y &lt;- x[!is.na(x)] y . &lt;ol class=list-inline&gt; 10.4 | 5.6 | 3.1 | 6.4 | 21.7 | &lt;/ol&gt; The following expression creates an object z and places in it the values of the vector x+1 for which the corresponding value in x was both non-missing and positive: . (x+1)[(!is.na(x)) &amp; x&gt;0] -&gt; z z . &lt;ol class=list-inline&gt; 11.4 | 6.6 | 4.1 | 7.4 | 22.7 | &lt;/ol&gt; (2) A vector of positive integral quantities . In this case the values in the index vector must lie in the set {1, 2, ..., length(x)}. The corresponding elements of the vector are selected and concatenated, in that order, in the result. The index vector can be of any length and the result is of the same length as the index vector. For example: . x[6] # The sixth component of x x[1:10] # Selects the first 10 elements of x (assuming length(x) is not less than 10) . &lt;NA&gt; &lt;ol class=list-inline&gt; 10.4 | 5.6 | 3.1 | 6.4 | 21.7 | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;/ol&gt; The following expression, though an admittedly unlikely thing to use, produces a character vector of length 16 consisting of &quot;x&quot;, &quot;y&quot;, &quot;y&quot;, &quot;x&quot; repeated four times: . c(&quot;x&quot;,&quot;y&quot;)[rep(c(1,2,2,1), times=4)] . &lt;ol class=list-inline&gt; &#39;x&#39; | &#39;y&#39; | &#39;y&#39; | &#39;x&#39; | &#39;x&#39; | &#39;y&#39; | &#39;y&#39; | &#39;x&#39; | &#39;x&#39; | &#39;y&#39; | &#39;y&#39; | &#39;x&#39; | &#39;x&#39; | &#39;y&#39; | &#39;y&#39; | &#39;x&#39; | &lt;/ol&gt; A vector of negative integral quantities . Such an index vector specifies the values to be excluded rather than included. Thus the following expression gives y all but the first five elements of x. . y &lt;- x[-(1:5)] y . A vector of character strings . This possibility applies only where an object has a names attribute to identify its components. In this case a sub-vector of the names vector may be used in the same way as the positive integral labels in item 2 further above. . fruit &lt;- c(5, 10, 1, 20) fruit names(fruit) &lt;- c(&quot;orange&quot;, &quot;banana&quot;, &quot;apple&quot;, &quot;peach&quot;) fruit lunch &lt;- fruit[c(&quot;apple&quot;,&quot;orange&quot;)] lunch . &lt;ol class=list-inline&gt; 5 | 10 | 1 | 20 | &lt;/ol&gt; &lt;dl class=dl-horizontal&gt; orange 5 banana 10 apple 1 peach 20 &lt;/dl&gt; &lt;dl class=dl-horizontal&gt; apple 1 orange 5 &lt;/dl&gt; The advantage of such vectors is that alphanumeric names are often easier to remember than numeric indices. This option is particularly useful in connection with data frames. . Besides the four types above, an indexed expression can also appear on the receiving end of an assignment, in which case the assignment operation is performed only on those elements of the vector. The expression must be of the form vector[index_vector] as having an arbitrary expression in place of the vector name does not make much sense here. For example, the first expression below replaces any missing values in x by zeros and the second has the same effect as y &lt;- abs(y): . x[is.na(x)] &lt;- 0 x y[y &lt; 0] &lt;- -y[y &lt; 0] y . &lt;ol class=list-inline&gt; 10.4 | 5.6 | 3.1 | 6.4 | 21.7 | &lt;/ol&gt; Other types of objects . Vectors are the most important type of object in R, but there are several others which we will meet more formally in later sections. . Matrices, or more generally arrays, are multi-dimensional generalizations of vectors. In fact, they are vectors that can be indexed by two or more indices and will be printed in special ways. See Arrays and matrices. . Factors provide compact ways to handle categorical data. See Factors. . Lists are a general form of vector in which the various elements need not be of the same type, and are often themselves vectors or lists. Lists provide a convenient way to return the results of a statistical computation. See Lists. . Data frames are matrix-like structures in which the columns can be of different types. Think of data frames as &#39;data matrices&#39; with one row per observational unit but with (possibly) both numerical and categorical variables. Many experiments are best described by data frames: the treatments are categorical but the response is numeric. See Data frames. . Functions are themselves objects in R which can be stored in the project&#39;s workspace. This provides a simple and convenient way to extend R. See Writing your own functions. . A sample R session . The code in this walkthrough introduces you to various features of the R environment, such as plotting and management of objects. . To begin with, generate two psuedo-random normal vectors of x- and y-coordinates: . x &lt;- rnorm(50) y &lt;- rnorm(x) . Plot the points in a plane, generating an inline graphic. Note the use of option to set the graph size larger than the default, which is 4x3: . # Set plot size for this section options(repr.plot.width=8, repr.plot.height=6) plot(x, y) . See which R objects are now in the R workspace. . ls() . &lt;ol class=list-inline&gt; &#39;fruit&#39; | &#39;ind&#39; | &#39;labs&#39; | &#39;lunch&#39; | &#39;n&#39; | &#39;s3&#39; | &#39;s4&#39; | &#39;s5&#39; | &#39;s6&#39; | &#39;t&#39; | &#39;T&#39; | &#39;temp&#39; | &#39;v&#39; | &#39;x&#39; | &#39;y&#39; | &#39;z&#39; | &lt;/ol&gt; Clean up objects that aren&#39;t needed: . rm(x, y) ls() . &lt;ol class=list-inline&gt; &#39;fruit&#39; | &#39;ind&#39; | &#39;labs&#39; | &#39;lunch&#39; | &#39;n&#39; | &#39;s3&#39; | &#39;s4&#39; | &#39;s5&#39; | &#39;s6&#39; | &#39;t&#39; | &#39;T&#39; | &#39;temp&#39; | &#39;v&#39; | &#39;z&#39; | &lt;/ol&gt; Create a &#39;weight&#39;’ vector of standard deviations: . x &lt;- 1:20 # Create a vector of 1, 2, 3, ... 20 w &lt;- 1 + sqrt(x)/2 w . &lt;ol class=list-inline&gt; 1.5 | 1.70710678118655 | 1.86602540378444 | 2 | 2.11803398874989 | 2.22474487139159 | 2.3228756555323 | 2.41421356237309 | 2.5 | 2.58113883008419 | 2.6583123951777 | 2.73205080756888 | 2.80277563773199 | 2.87082869338697 | 2.93649167310371 | 3 | 3.06155281280883 | 3.12132034355964 | 3.17944947177034 | 3.23606797749979 | &lt;/ol&gt; Make a data frame of two columns, x and y, and look at it: . dummy &lt;- data.frame(x=x, y= x + rnorm(x)*w) dummy . xy . 1 | 3.6965830 | . 2 | 0.4100155 | . 3 | 4.4419981 | . 4 | 4.5798786 | . 5 | 2.5035002 | . 6 | 4.9041995 | . 7 | 7.0779488 | . 8 | 10.1868733 | . 9 | 12.0140044 | . 10 | 8.3569173 | . 11 | 7.6504456 | . 12 | 16.4232097 | . 13 | 9.5291972 | . 14 | 12.4493172 | . 15 | 10.6120654 | . 16 | 13.2155225 | . 17 | 16.9275059 | . 18 | 19.7944627 | . 19 | 20.7573200 | . 20 | 23.7890149 | . Fit a simple linear regression and look at the analysis. With y to the left of the tilde, we are modelling y dependent on x. . fm &lt;- lm(y ~ x, data=dummy) summary(fm) . Call: lm(formula = y ~ x, data = dummy) Residuals: Min 1Q Median 3Q Max -4.3692 -1.8165 0.0317 1.9096 4.4521 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) -0.06954 1.24408 -0.056 0.956 x 1.00338 0.10385 9.662 1.51e-08 *** Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 2.678 on 18 degrees of freedom Multiple R-squared: 0.8383, Adjusted R-squared: 0.8294 F-statistic: 93.35 on 1 and 18 DF, p-value: 1.513e-08 . Because we know the standard deviations, we can do a weighted regression. . fm1 &lt;- lm(y ~ x, data=dummy, weight=1/w^2) summary(fm1) . Call: lm(formula = y ~ x, data = dummy, weights = 1/w^2) Weighted Residuals: Min 1Q Median 3Q Max -1.41263 -0.91925 0.02371 0.73987 1.65011 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 0.53422 0.95056 0.562 0.581 x 0.94840 0.09693 9.785 1.25e-08 *** Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 1.05 on 18 degrees of freedom Multiple R-squared: 0.8417, Adjusted R-squared: 0.833 F-statistic: 95.74 on 1 and 18 DF, p-value: 1.247e-08 . Make the columns in the data frame visible as variables (this code produces a warning about objects of the same name being masked in other environments, which can be safely ignored in this demonstration). . attach(dummy) . The following object is masked _by_ .GlobalEnv: x The following object is masked from package:base: x . Make a nonparametric local regression function. . lrf &lt;- lowess(x, y) . The next lines created (a) A standard point plot, (b) a line for the local regressions, (c) the true regression line, (d) unweighted regression line, and (e) weighted regression line. . plot(x, y) # Standard plot point lines(x, lrf$y) # Local regression abline(0, 1, lty=3) # True regression line (intercept = 0, slope = 1) abline(coef(fm)) # Unweighted regression line abline(coef(fm1), col = &quot;red&quot;) # Weighted regression line . Remove data frame from the search path. . detach() . A standard regression diagnostic plot to check for heteroscedasticity. Can you see it? . plot(fitted(fm), resid(fm), xlab=&quot;Fitted values&quot;, ylab=&quot;Residuals&quot;, main=&quot;Residuals vs Fitted&quot;) . A normal scores plot to check for skewness, kurtosis and outliers. (Not very useful here.) . qqnorm(resid(fm), main=&quot;Residuals Rankit Plot&quot;) . Clean up again. . rm(fm, fm1, lrf, x, dummy) . Work with the Michelson-Morley experiment . The next section looks at data from the classical experiment of Michelson to measure the speed of light. This dataset is available in the morley object, but we will read it to illustrate the read.table function. . Get the path to the data file. . filepath &lt;- system.file(&quot;data&quot;, &quot;morley.tab&quot; , package=&quot;datasets&quot;) filepath . &#39;/opt/microsoft/ropen/3.4.1/lib64/R/library/datasets/data/morley.tab&#39; (Optional) Look at the file, which opens another pane containing the file contents. Use the x in the upper right of that pane to close the file view. . file.show(filepath) . Read in the Michelson data as a data frame, and look at it. There are five experiments (column Expt) and each has 20 runs (column Run) and sl is the recorded speed of light, suitably coded. . mm &lt;- read.table(filepath) mm . ExptRunSpeed . 0011 | 1 | 850 | . 0021 | 2 | 740 | . 0031 | 3 | 900 | . 0041 | 4 | 1070 | . 0051 | 5 | 930 | . 0061 | 6 | 850 | . 0071 | 7 | 950 | . 0081 | 8 | 980 | . 0091 | 9 | 980 | . 0101 | 10 | 880 | . 0111 | 11 | 1000 | . 0121 | 12 | 980 | . 0131 | 13 | 930 | . 0141 | 14 | 650 | . 0151 | 15 | 760 | . 0161 | 16 | 810 | . 0171 | 17 | 1000 | . 0181 | 18 | 1000 | . 0191 | 19 | 960 | . 0201 | 20 | 960 | . 0212 | 1 | 960 | . 0222 | 2 | 940 | . 0232 | 3 | 960 | . 0242 | 4 | 940 | . 0252 | 5 | 880 | . 0262 | 6 | 800 | . 0272 | 7 | 850 | . 0282 | 8 | 880 | . 0292 | 9 | 900 | . 0302 | 10 | 840 | . ...... | ... | ... | . 0714 | 11 | 910 | . 0724 | 12 | 920 | . 0734 | 13 | 890 | . 0744 | 14 | 860 | . 0754 | 15 | 880 | . 0764 | 16 | 720 | . 0774 | 17 | 840 | . 0784 | 18 | 850 | . 0794 | 19 | 850 | . 0804 | 20 | 780 | . 0815 | 1 | 890 | . 0825 | 2 | 840 | . 0835 | 3 | 780 | . 0845 | 4 | 810 | . 0855 | 5 | 760 | . 0865 | 6 | 810 | . 0875 | 7 | 790 | . 0885 | 8 | 810 | . 0895 | 9 | 820 | . 0905 | 10 | 850 | . 0915 | 11 | 870 | . 0925 | 12 | 870 | . 0935 | 13 | 810 | . 0945 | 14 | 740 | . 0955 | 15 | 810 | . 0965 | 16 | 940 | . 0975 | 17 | 950 | . 0985 | 18 | 800 | . 0995 | 19 | 810 | . 1005 | 20 | 870 | . Change Expt and Run into factors. . mm$Expt &lt;- factor(mm$Expt) mm$Run &lt;- factor(mm$Run) . Make the data frame visible at position 3 (the default). . attach(mm) . Compare the five experiments with simple boxplots. . # Set plot size for this section options(repr.plot.width=8, repr.plot.height=6) plot(Expt, Speed, main=&quot;Speed of Light Data&quot;, xlab=&quot;Experiment No.&quot;) . Analyze as a randomized block, with ‘runs’ and ‘experiments’ as factors. . fm &lt;- aov(Speed ~ Run + Expt, data=mm) summary(fm) . Df Sum Sq Mean Sq F value Pr(&gt;F) Run 19 113344 5965 1.105 0.36321 Expt 4 94514 23629 4.378 0.00307 ** Residuals 76 410166 5397 Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 . Fit the sub-model omitting ‘runs’, and compare using a formal analysis of variance. . fm0 &lt;- update(fm, . ~ . - Run) anova(fm0, fm) . Res.DfRSSDfSum of SqFPr(&gt;F) . 95 | 523510 | NA | NA | NA | NA | . 76 | 410166 | 19 | 113344 | 1.105348 | 0.3632093 | . Clean up before moving on. . detach() rm(fm, fm0) . Graphical features: contour and image plots . x is a vector of 50 equally spaced values in the interval [-pi , pi]. y is the same. . x &lt;- seq(-pi, pi, len=50) y &lt;- x . f is a square matrix, with rows and columns indexed by x and y respectively, of values of the function cos(y)/(1 + x^2). . f &lt;- outer(x, y, function(x, y) cos(y)/(1 + x^2)) . Save the plotting parameters and set the plotting region to “square”. . oldpar &lt;- par(no.readonly = TRUE) par(pty=&quot;s&quot;) . Make a contour map of f; add in more lines for more detail. . contour(x, y, f) contour(x, y, f, nlevels=15, add=TRUE) . Make a contour plot. fa is the “asymmetric part” of f. (t() is transpose). . fa &lt;- (f-t(f))/2 contour(x, y, fa, nlevels=15) . Then restore the old graphics parameters. . par(oldpar) . Make some high density image plots: . image(x, y, f) image(x, y, fa) . Clean up before moving on. . objects(); rm(x, y, f, fa) . &lt;ol class=list-inline&gt; &#39;f&#39; | &#39;fa&#39; | &#39;filepath&#39; | &#39;fruit&#39; | &#39;ind&#39; | &#39;labs&#39; | &#39;lunch&#39; | &#39;mm&#39; | &#39;n&#39; | &#39;oldpar&#39; | &#39;s3&#39; | &#39;s4&#39; | &#39;s5&#39; | &#39;s6&#39; | &#39;t&#39; | &#39;T&#39; | &#39;temp&#39; | &#39;v&#39; | &#39;w&#39; | &#39;x&#39; | &#39;y&#39; | &#39;z&#39; | &lt;/ol&gt; Complex arithmetic in R . 1i is used for the complex number i. . th &lt;- seq(-pi, pi, len=100) z &lt;- exp(1i*th) . Plotting complex arguments means plot imaginary versus real parts. This should be a circle. . # Set plot size for this section options(repr.plot.width=6, repr.plot.height=6) par(pty=&quot;s&quot;) plot(z, type=&quot;l&quot;) . Suppose we want to sample points within the unit circle. One method would be to take complex numbers with standard normal real and imaginary parts: . w &lt;- rnorm(100) + rnorm(100)*1i . And to map any outside the circle onto their reciprocal. . w &lt;- ifelse(Mod(w) &gt; 1, 1/w, w) . All points are inside the unit circle, but the distribution is not uniform. . plot(w, xlim=c(-1,1), ylim=c(-1,1), pch=&quot;+&quot;,xlab=&quot;x&quot;, ylab=&quot;y&quot;) lines(z) . The second method uses the uniform distribution. The points should now look more evenly spaced over the disc. . w &lt;- sqrt(runif(100))*exp(2*pi*runif(100)*1i) plot(w, xlim=c(-1,1), ylim=c(-1,1), pch=&quot;+&quot;, xlab=&quot;x&quot;, ylab=&quot;y&quot;) lines(z) . Clean up again. . rm(th, w, z) . Comparison of R and S graphics capabilities . The following code cells illustrate some of the differences between R and S graphics capabilities. Colors are generally specified by a character string name (taken from the X11 rgb.txt file) and that line textures are given similarly. The parameter &quot;bg&quot; sets the background parameter for the plot and there is also an &quot;fg&quot; parameter which sets the foreground color. . require(datasets) require(grDevices); require(graphics) . # Set plot size for this section options(repr.plot.width=8, repr.plot.height=6) x &lt;- stats::rnorm(50) opar &lt;- par(bg = &quot;white&quot;) plot(x, ann = FALSE, type = &quot;n&quot;) + abline(h = 0, col = gray(.90)) + lines(x, col = &quot;green4&quot;, lty = &quot;dotted&quot;) + points(x, bg = &quot;limegreen&quot;, pch = 21) + title(main = &quot;Simple Use of Color In a Plot&quot;, xlab = &quot;Just a Whisper of a Label&quot;, col.main = &quot;blue&quot;, col.lab = gray(.8), cex.main = 1.2, cex.lab = 1.0, font.main = 4, font.lab = 3) . A little color wheel. . This code plots equally spaced hues in a pie chart. On low-quality monitors you may find that numerically equispaced are not visually equispaced and may cluster at the RGB primaries. On high-quality monitor, the color wheel should appear quite accurate. . # Set plot size for this section options(repr.plot.width=8, repr.plot.height=6) par(bg = &quot;gray&quot;) pie(rep(1,24), col = rainbow(24), radius = 0.9) + title(main = &quot;A Sample Color Wheel&quot;, cex.main = 1.4, font.main = 3) + title(xlab = &quot;(Use this as a test of monitor linearity)&quot;, cex.lab = 0.8, font.lab = 3) . A scatterplot matrix using Iris data . # Set plot size for this section options(repr.plot.width=8, repr.plot.height=6) pairs(iris[1:4], main=&quot;Edgar Anderson&#39;s Iris Data&quot;, pch=21, bg = c(&quot;red&quot;, &quot;green3&quot;, &quot;blue&quot;)[unclass(iris$Species)]) .",
            "url": "https://goncalogteixeira.github.io/fastPagesGoncalo/2020/02/26/Introduction-to-R.html",
            "relUrl": "/2020/02/26/Introduction-to-R.html",
            "date": " • Feb 26, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://goncalogteixeira.github.io/fastPagesGoncalo/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://goncalogteixeira.github.io/fastPagesGoncalo/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://goncalogteixeira.github.io/fastPagesGoncalo/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}